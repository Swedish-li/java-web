<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	<!-- Jedis 连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="2000" />
		<property name="maxIdle" value="100" />
		<property name="minIdle" value="50" />
		<property name="maxWaitMillis" value="2000" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="false" />
	</bean>
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg ref="jedisPoolConfig" />
		<constructor-arg>
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo" p:password="${redis.password}">
					<constructor-arg value="${redis.host}" />
					<constructor-arg type="int" value="${redis.port}" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<bean id="autoLoadConfig" class="com.jarvis.cache.to.AutoLoadConfig">
		<property name="threadCnt" value="10" />
		<property name="maxElement" value="20000" />
		<property name="printSlowLog" value="true" />
		<property name="slowLoadTime" value="500" />
		<property name="sortType" value="1" />
		<property name="checkFromCacheBeforeLoad" value="true" />
		<property name="autoLoadPeriod" value="50" />
	</bean>
	<!-- 可以通过implements com.jarvis.cache.serializer.ISerializer<Object> 实现 Kryo 
		和 FST Serializer 工具，框架的核对不在这里，所以不提供过多的实现 -->
	<bean id="hessianSerializer" class="com.jarvis.cache.serializer.HessianSerializer" />

	<bean id="cacheManager" class="com.jarvis.cache.redis.ShardedCachePointCut"
		destroy-method="destroy">
		<constructor-arg ref="autoLoadConfig" />
		<property name="serializer" ref="hessianSerializer" />
		<property name="shardedJedisPool" ref="shardedJedisPool" />
		<property name="namespace" value="web-lrs" />
	</bean>
	<bean id="cacheInterceptor" class="com.jarvis.cache.aop.aspectj.AspectjAopInterceptor">
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<aop:config proxy-target-class="true">
		<aop:aspect ref="cacheInterceptor">
			<aop:pointcut id="daoCachePointcut"
				expression="execution(public !void com.lrs.dao.impl..*.*(..)) &amp;&amp; @annotation(cache)" />
			<aop:around pointcut-ref="daoCachePointcut" method="proceed" />
		</aop:aspect>
		<aop:aspect ref="cacheInterceptor" order="1000"><!-- order 参数控制 aop通知的优先级，值越小，优先级越高 
				，在事务提交后删除缓存 -->
			<aop:pointcut id="deleteCachePointcut"
				expression="execution(* com.lrs.dao.impl..*.*(..)) &amp;&amp; @annotation(cacheDelete)" />
			<aop:after-returning pointcut-ref="deleteCachePointcut"
				method="deleteCache" returning="retVal" />
		</aop:aspect>
	</aop:config>
</beans>